 Generating data Set
// I have to generate the dataset. That means, I have to collect my images. For this purpose, Open-CV package can be used. To install this package, you can open any terminal and type:
pip install opencv-python
I am using haarcascade_frontalface_default xml file to get the coordinate of my face so that I can crop it and use it to make dataset and for future prediction.
I have to convert my images from RGB (Red, Green, Blue) to grayscale. RGB image has 3 channel whereas grayscale image has only 1 channel. It reduces lot of complexity if we convert so. 
Next using face classifier and using detectMultiScale method, we can get the coordinates. We have to pass scale factor and minimum neighbors. Scale factor refers to the factor of how much to change from the original image. Minimum neighbors indicates how many faces to detect. Higher value results in less detection but with higher quality. We have to play with this value. Depending on our output, we can make changes to this values. 
Then all we have to do is, just collect the image and stop the execution when it reaches 200 images or when we press Enter button from keyboard.

## pip install opencv-python
import cv2

def generate_dataset():
    face_classifier = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")
    def face_cropped(img):
        gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
        faces = face_classifier.detectMultiScale(gray, 1.3, 5)
        # scaling factor = 1.3
        # minimum neighbor = 5
        
        if faces is ():
            return None
        for (x,y,w,h) in faces:
            cropped_face = img[y:y+h,x:x+w]
        return cropped_face
    
    cap = cv2.VideoCapture(1)
    id =1
    img_id = 0
    
    while True:
        ret, frame = cap.read()
        if face_cropped(frame) is not None:
            img_id+=1
            face = cv2.resize(face_cropped(frame), (200,200))
            face = cv2.cvtColor(face, cv2.COLOR_BGR2GRAY)
            file_name_path = "data/user."+str(id)+"."+str(img_id)+".jpg"
            cv2.imwrite(file_name_path, face)
            cv2.putText(face, str(img_id), (50,50), cv2.FONT_HERSHEY_COMPLEX, 1, (0,255,0), 2)
            
            cv2.imshow("Cropped face", face)
            
        if cv2.waitKey(1)==13 or int(img_id)==200: #13 is the ASCII character of Enter
            break
            
    cap.release()
    cv2.destroyAllWindows()
    print("Collecting samples is completed....")
generate_dataset()